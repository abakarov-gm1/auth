version: "3"

services:

  nginx:
    build:
      context: auth/api/docker/nginx
      dockerfile: Dockerfile
    restart: always
    privileged: true
    hostname: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf:/etc/nginx/conf
      - ./nginx/enabled:/etc/nginx/enabled
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./www:/var/www
      - ./certbot/www/:/var/www/certbot/:rw
      - ./certbot/conf/:/etc/letsencrypt/:rw
    networks:
      - dev
    depends_on:
      - fast-api

  fast-api:
    build:
      context: auth/api
      dockerfile: docker/dev/Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./auth/api:/app
    networks:
      - dev
    environment:
      UPLOAD_DIR: uploads
      SMS_SERVICE_KEY: VJE190N841KGED5V624GD9EOFOB7XG89D819V56O1Y6B29P6I59792X991OGYY49
      JWT_SECRET_KEY: secret
      POSTGRES_USER: user
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: user

  bot:
    build:
      context: auth/bot
      dockerfile: docker/Dockerfile
    volumes:
      - ./auth/bot:/app
    networks:
      - dev

  db-postgres:
    image: postgres:14.1-alpine
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: user
    volumes:
      - db-volume:/var/lib/postgresql/data
    networks:
      - dev
    ports:
      - "5432:5432"


  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - dev

  certbot:
    image: certbot/certbot
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    depends_on:
      - web
    networks:
      - dev



networks:
  dev:

volumes:
  letsencrypt:
  redis_data:
  uploads:
  db-volume:
    driver: local


